[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "histalign"
dynamic = ["version"]
description = 'Processing workflow for histological image alignments to the Allen CCF.'
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = []
authors = [
  { name = "Olivier DelrÃ©e", email = "olivierdelree@protonmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "allensdk",
  "click",
  "h5py",
  "imagecodecs",
  "matplotlib",
  "numpy",
  "opencv-python",
  "psutil",
  "pyside6",
  "pynrrd",
  "pydantic",
  "readlif",
  "scikit-image",
  "tifffile",
  "vedo",
]

[project.urls]
Documentation = "https://github.com/olivierdelree/histalign#readme"
Issues = "https://github.com/olivierdelree/histalign/issues"
Source = "https://github.com/olivierdelree/histalign"

[project.scripts]
histalign = "histalign:histalign"

[tool.hatch.version]
path = "src/histalign/__about__.py"

[dependency-groups]
dev = [
  { include-group = "docs" },
  { include-group = "test" },
  { include-group = "type" },
  "jupyter",
]
docs = [
  "griffe-pydantic",
  "mkdocs",
  "mkdocs-caption",
  "mkdocs-click",
  "mkdocs-gen-files",
  "mkdocs-literate-nav",
  "mkdocs-material",
  "mkdocs-section-index",
  "mkdocstrings-python",
]
test = [
  "pytest",
]
type = [
  "mypy",
]

[tool.hatch.envs.default]
path = ".venv"  # Use the environment provided by uv

[tool.hatch.envs.default.scripts]
docs-build = "mkdocs build --clean --strict"
docs-serve = "mkdocs serve --dev-addr localhost:8888"
test-run = "pytest --ignore=tests/backend/registration/resources/re_baseline_test.py {args:tests}"
type-check = "mypy --install-types --non-interactive {args:src/histalign}"
type-hunt = "check 2>&1 > /dev/null | grep 'src/histalign' | cut -d ':' -f 1 | uniq -c | sort -r"
type-fewest = "hunt | awk 'END{{print}}' | rev | cut -d ' ' -f 1 | rev"
# Very ugly, no sure how to have script expansion after the first word of a script.
# This prints the errors for the file with the fewest errors and copies the path to the WSL clipboard.
type-next = """
mypy --install-types --non-interactive \
$(bash -c "mypy --install-types --non-interactive src/histalign 2>&1 > /dev/null \
| grep 'src/histalign' | cut -d ':' -f 1 | uniq -c | sort -r \
| awk 'END{{print}}' | rev | cut -d ' ' -f 1 | rev |  tr -d '\n' | tee >(clip.exe)")
"""
# Same but without copying, dropping bash and WSL dependencies
type-next-no-copy = """
mypy --install-types --non-interactive \
$(mypy --install-types --non-interactive src/histalign 2>&1 > /dev/null \
| grep 'src/histalign' | cut -d ':' -f 1 | uniq -c | sort -r \
| awk 'END{{print}}' | rev | cut -d ' ' -f 1 | rev)
"""

[tool.mypy]
ignore_missing_imports = true
follow_imports = "normal"
pretty = true
allow_redefinition = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
disable_error_code = [
  "call-overload",
]

[tool.pytest.ini_options]
filterwarnings = [
  "ignore:(?i).*swig.*:DeprecationWarning"
]
